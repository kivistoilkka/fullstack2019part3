{"version":3,"sources":["components/Persons.js","components/PersonForm.js","components/Filter.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Persons","props","personsToShow","persons","filter","person","name","toLowerCase","includes","nameFilter","map","key","number","onClick","deletePerson","PersonForm","onSubmit","addName","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","handleNameFilter","baseUrl","getAll","axios","get","then","response","data","create","newObject","post","remove","personId","delete","replace","changedPerson","put","id","Notification","message","isError","className","App","useState","setPersons","setNewName","setNewNumber","setNameFilter","notification","setNotification","errorState","setErrorState","useEffect","personService","initialPersons","event","target","preventDefault","every","personObject","returnedPerson","concat","setTimeout","window","confirm","find","p","catch","error","removedPerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7546845.chunk.js","sourcesContent":["import React from 'react'\n\nconst Persons = (props) => {\n    const personsToShow = props.persons.filter(person =>\n        person.name.toLowerCase().includes(props.nameFilter.toLowerCase()))\n    \n    const rows = () => personsToShow.map(person => \n        <div key={person.name}>\n            {person.name} {person.number}\n            <button onClick={() => props.deletePerson(person)}>\n                delete\n            </button>\n        </div>\n        )\n\n    return (\n        <div>{rows()}</div>\n    )\n}\n\nexport default Persons","import React from 'react'\n\nconst PersonForm = (props) => {\n    return (\n        <form onSubmit={props.addName}>\n            <div>\n                name: <input value={props.newName} onChange={props.handleNameChange} />\n            </div>\n            <div>\n                number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n            </div>\n            <div>\n              <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with <input value={props.nameFilter} onChange={props.handleNameFilter} />\n    </div>\n  )\n}\n\nexport default Filter","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl).then(response => response.data)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject).then(response => response.data)\n}\n\nconst remove = personId => {\n    return axios.delete(`${baseUrl}/${personId}`)\n}\n\nconst replace = changedPerson => {\n    return axios.put(`${baseUrl}/${changedPerson.id}`, changedPerson).then(response => response.data)\n}\n\nexport default { getAll, create, remove, replace }","import React from 'react'\n\nconst Notification = ({ message, isError }) => {\n    if (message === null) {\n        return null\n    }\n\n    if (isError) {\n        return (\n            <div className=\"error\">\n                {message}\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"notification\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport personService from './services/persons'\nimport './index.css'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ nameFilter, setNameFilter ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n  const [ errorState, setErrorState ] = useState(false)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addName = (event) => {\n    event.preventDefault()\n    if (persons.every((person) => person.name !== newName)) {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      \n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n        })\n      \n      setNotification(\n        `Added ${personObject.name}`\n      )\n      setTimeout(() => {\n        setNotification(null)\n      }, 5000)\n    } else {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = persons.find(p => p.name === newName)\n        const changedPerson = { ...person, number: newNumber}\n        personService\n          .replace(changedPerson)\n          .then(returnedPerson =>\n            setPersons(persons.map(person => person.id !== changedPerson.id\n              ? person\n              : returnedPerson))\n            ).catch(error => {\n              setErrorState(true)\n              setNotification(\n                `Information of ${changedPerson.name} has already been removed from server`\n              )\n              setTimeout(() => {\n                setNotification(null)\n                setErrorState(false)\n              }, 5000)\n              setPersons(persons.filter(p => p.id !== person.id))\n            })\n        setNewName('')\n        setNewNumber('')\n        \n        setNotification(\n          `Changed number of ${changedPerson.name}`\n        )\n        setTimeout(() => {\n          setNotification(null)\n        }, 5000)\n      }\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNameFilter = (event) => {\n    setNameFilter(event.target.value)\n  }\n\n  const deletePerson = (removedPerson) => {\n    if (window.confirm(`Delete ${removedPerson.name} ?`)) {\n      personService.remove(removedPerson.id)\n      setPersons(persons.filter(person => person.id !== removedPerson.id))\n      \n      setNotification(\n        `Deleted ${removedPerson.name}`\n      )\n      setTimeout(() => {\n        setNotification(null)\n      }, 5000)\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={notification} isError={errorState} />\n\n      <Filter nameFilter={nameFilter} handleNameFilter={handleNameFilter} />\n\n      <h3>Add a new</h3>\n      \n      <PersonForm\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newName={newName}\n        newNumber={newNumber}\n        addName={addName}\n      />\n\n      <h3>Numbers</h3>\n\n      <Persons\n        persons={persons}\n        nameFilter={nameFilter}\n        personService={personService}\n        deletePerson={deletePerson}\n      />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}